<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on Showcase Template</title><link>https://grawing.github.io/showcase/</link><description>Recent content in Introduction on Showcase Template</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://grawing.github.io/showcase/index.xml" rel="self" type="application/rss+xml"/><item><title>Creating a New Theme</title><link>https://grawing.github.io/showcase/posts/creating-a-new-theme/</link><pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/posts/creating-a-new-theme/</guid><description>Introduction # This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description></item><item><title>Migrate to Hugo from Jekyll</title><link>https://grawing.github.io/showcase/posts/migrate-from-jekyll/</link><pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/posts/migrate-from-jekyll/</guid><description>Move static content to static # Jekyll has a rule that any directory not starting with _ will be copied as-is to the _site output. Hugo keeps all static content under static. You should therefore move it all there. With Jekyll, something that looked like
▾ &amp;lt;root&amp;gt;/ ▾ images/ logo.png should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as CNAME) to be moved to static.</description></item><item><title>(Hu)go Template Primer</title><link>https://grawing.github.io/showcase/posts/goisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/posts/goisforlovers/</guid><description>Hugo uses the excellent Go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in Go templates.
This document is a brief primer on using Go templates.</description></item><item><title>Getting Started with Hugo</title><link>https://grawing.github.io/showcase/posts/hugoisforlovers/</link><pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/posts/hugoisforlovers/</guid><description>Step 1. Install Hugo # Go to Hugo releases and download the appropriate version for your OS and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at Install Hugo
Step 2. Build the Docs # Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:</description></item><item><title/><link>https://grawing.github.io/showcase/docs/shortcodes/integrantes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/docs/shortcodes/integrantes/</guid><description>Integrantes # El desarrollo del siguiente repositorio se realiza con los siguientes dos integrsntes:
Gustavo Adolfo Mojica Perdigon # Es un estudiante de ingeniería de sistemas y computación en decimo semestre, entre sus principales intereses académicos están la rama del desarrollo e ingeniería de software con un enfoque especial en el diseño de aplicación y arquitectura de software, además de tener un enfoque en el desarrollo back-end. Los principales pasatiempos son el Voleibol, la pintura (principalmente la tecnica de la acuarela) y las series de televisión.</description></item><item><title/><link>https://grawing.github.io/showcase/docs/shortcodes/Taller1/Ilusiones/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/docs/shortcodes/Taller1/Ilusiones/</guid><description>Ilusiones # Una ilusión óptica es una imagen que engaña el sistema visual, desde el ojo al cerebro, y lo lleva a percibir la realidad de forma distorsionada. Las ilusiones ópticas pueden suceder de manera natural o ser creadas por efectos visuales específicos. Esta es el resultado del análisis de la información que se recibe del sistema visual. Este puede hacer que se perciba un objeto que no está presente, dando una imagen distorsionada de la realidad.</description></item><item><title/><link>https://grawing.github.io/showcase/docs/shortcodes/Taller1/Kernels/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/docs/shortcodes/Taller1/Kernels/</guid><description>Masking # La aplicación de máscaras de convolución desempeña un papel muy importante en el campo del procesamiento de imágenes. Se puede aplicar desenfoque, nitidez, relieve, detección de bordes, etc.
Kernels # Un kernel, matriz de convolución o máscara es una pequeña matriz que se utiliza en el procesamiento de imágenes para desenfocar, enfocar, resaltar, detectar bordes, etc. Para ello se utiliza la convolución entre el núcleo y una imagen.</description></item><item><title/><link>https://grawing.github.io/showcase/docs/shortcodes/Taller2/espacios/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/docs/shortcodes/Taller2/espacios/</guid><description>Espacios # Planteamiento del problema # En computación, la interacción 3D es una forma de interacción hombre-máquina en la que los usuarios pueden moverse y realizar interacciones en el espacio 3D. Tanto el ser humano como la máquina procesan información en la que la posición física de los elementos en el espacio 3D es relevante. El espacio 3D utilizado para la interacción puede ser el espacio físico real, una representación del espacio virtual simulado en el ordenador o una combinación de ambos.</description></item><item><title/><link>https://grawing.github.io/showcase/docs/shortcodes/Taller3/Ejercicio1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/docs/shortcodes/Taller3/Ejercicio1/</guid><description>Masking # Planteamiento del problema # En el procesamiento de imágenes, un kernel, matriz de convolución o máscara es una pequeña matriz que se utiliza para desenfocar, afinar, dar relieve, detectar bordes, etc. Esto se consigue haciendo una convolución entre el núcleo y una imagen. La expresión general de una convolución es
Donde g(x,y) es la imagen filtrada, f(x,y) es la imagen original, w es el kernel del filtro. Dependiendo de los valores de los elementos, un kernel puede causar una amplia gama de efectos.</description></item><item><title/><link>https://grawing.github.io/showcase/docs/shortcodes/Taller3/Ejercicio2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/docs/shortcodes/Taller3/Ejercicio2/</guid><description>Normal mapping # Planteamiento del problema # En los gráficos por ordenador en 3D, el mapeo normal, o mapeo de baches Dot3, es una técnica de mapeo de texturas que se utiliza para fingir la iluminación de baches y abolladuras, una implementación del mapeo de baches. Se utiliza para añadir detalles sin utilizar más polígonos. Un uso común de esta técnica es mejorar en gran medida la apariencia y los detalles de un modelo de pocos polígonos generando un mapa de normales a partir de un modelo de muchos polígonos o un mapa de altura.</description></item><item><title/><link>https://grawing.github.io/showcase/docs/shortcodes/Taller3/Ejercicio3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://grawing.github.io/showcase/docs/shortcodes/Taller3/Ejercicio3/</guid><description>Texturing # Planteamiento del problema # LUMA: El luma representa el brillo de una imagen (la parte &amp;ldquo;en blanco y negro&amp;rdquo; o acromática de la imagen). El luma suele ir emparejado con la crominancia. El luma representa la imagen acromática, mientras que los componentes del croma representan la información del color. Es un término comúnmente utilizado en el procesamiento digital de imágenes para caracterizar a cada píxel. En los formatos digitales que siguen el estándar CCIR_601, la luma Y de un píxel se calcula con la fórmula Y = 0,299R + 0,587G + 0,114B.</description></item></channel></rss>